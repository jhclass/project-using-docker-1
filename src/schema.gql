# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommonResponse {
  ok: Boolean!
  message: String
  error: String
}

type ResultLogin {
  ok: Boolean!
  message: String
  error: String
  token: String
  refreshToken: String
}

type ConsultationMemo {
  id: Int!
  content: String!
  createdAt: String!
  updatedAt: String!
  studentState: StudentState
  studentStateId: Int
  manageUser: ManageUser
  manageUserId: Int
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
}

type StudentState {
  id: Int!
  campus: String
  category: String
  stName: String!
  phoneNum1: String!
  phoneNum2: String
  phoneNum3: String
  currentManager: ManageUser
  currentManagerId: Int
  subject: [String]
  detail: String
  agreement: String!
  progress: Int!
  stEmail: String
  stAddr: String
  subDiv: String
  stVisit: String
  expEnrollDate: String
  perchase: Boolean
  createdAt: String!
  updatedAt: String!
  receiptDiv: String
  pic: String
  classMethod: [String!]
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
  adviceTypes: [AdviceType]
  consultationMemo: [ConsultationMemo]
}

type UpdateStudentStateResult {
  ok: Boolean!
  message: String
  error: String
}

type StudentStateResponse {
  ok: Boolean!
  message: String
  totalCount: Int
  studentState: [StudentState]
}

type UpdateFavoriteResult {
  ok: Boolean!
  message: String
  error: String
  favoriteStudentState: ManageUser
}

type SearchStudentStateResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  studentState: [StudentState]
}

type AdviceType {
  id: Int!
  type: String!
  indexNum: Int!
  category: String
  onOff: String
  defaultValue: String
  createdAt: String!
  updatedAt: String!
  studentStates: [StudentState]
  lastModifiedTime: String
  Branch: Branch
  branchId: Int
  StudentState: [StudentState!]!
}

type ResultAdviceType {
  ok: Boolean!
  message: String
  error: String
  adviceType: [AdviceType]
  totalCount: Int
}

type Branch {
  id: Int!
  branchName: String
  createdAt: String!
  updatedAt: String!
  lastModifiedTime: String
  AdviceType: [AdviceType!]
  StudentState: [StudentState!]
  ConsultationMemo: [ConsultationMemo!]
  PermissionsGranted: [PermissionsGranted!]
}

type PermissionsGranted {
  id: Int!
  permissionName: String!
  topic: String
  ManageUser: [ManageUser!]
  smsPermitted: String
  readOnly: String
  allPermitted: String
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
}

type ResultSearchPermissionsGranted {
  ok: Boolean!
  message: String
  error: String
  data: [PermissionsGranted]
  totalCount: Int
}

type StudentMemo {
  id: Int!
  content: String!
  student: Student
  studentId: Int
  manageUser: ManageUser
  manageUserId: Int
  createdAt: String
  updatedAt: String
  lastModifiedTime: String
}

type WorkLogs {
  id: Int
  createdAt: String!
  updatedAt: String!
  paymentOne: String
  paymentTwo: String
  paymentThree: String
  trainingInfoOne: [String]
  trainingInfoTwo: [String]
  trainingInfoThree: [String]
  trainingInfoFour: [String]
  trainingInfoFive: [String]
  trainingInfoSix: [String]
  trainingInfoSeven: [String]
  trainingInfoEight: [String]
  trainingTimeOneday: [Int]
  trainingTimeTotal: [Int]
  instruction: String
  absentSt: String
  tardySt: String
  leaveEarlySt: String
  outingSt: String
  etc: String
  lectures: Lectures
  lecturesId: Int!
  workLogsDate: String!
  attendanceCount: [Int]
  Branch: Branch
  BranchId: Int
  checkList: [String]
  checkContext: [String]
  lastModifiedTime: String
}

type SearchWorkLogsResult {
  ok: Boolean!
  message: String
  error: String
  data: [WorkLogs]
  totalCount: Int
}

type SignWorkLogsResult {
  ok: Boolean!
  message: String
  error: String
  stampUrl: String
}

type Lectures {
  id: Int!
  createdAt: String!
  updatedAt: String!
  campus: String!
  temporaryName: String!
  subDiv: String!
  teachers: [ManageUser]
  roomNum: String!
  subject: Subject
  subjectId: Int!
  lecturePeriodStart: String!
  lecturePeriodEnd: String!
  lectureDetails: [String!]!
  lectureTime: [String!]!
  eduStatusReport: String!
  ApprovedNum: Int!
  confirmedNum: Int!
  sessionNum: Int!
  timetableAttached: String
  WorkLogs: [WorkLogs!]
  lastModifiedTime: String
}

type SeeLecturesResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  data: [Lectures]
}

type SearchLecturesResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  data: [Lectures]
}

type Subject {
  id: Int
  subDiv: String
  subjectName: String
  createdAt: String
  updatedAt: String
  fee: Int
  startDate: String
  endDate: String
  roomNum: String
  exposure: Boolean
  totalTime: Int
  teacherName: String
  subjectCode: String
  expiresDateStart: String
  expiresDateEnd: String
  round: Int
  StudentPayment: [StudentPayment!]
  lectures: Lectures
  branchId: Int
  Branch: Branch
  lastModifiedTime: String
}

type SearchSubjectResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  result: [Subject]
}

type SeeSubjectResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  subject: [Subject]
}

type Attendance {
  id: Int
  createdAt: String
  updatedAt: String
  attendanceState: String
  attendanceDate: String
  studentPayment: StudentPayment
  studentPaymentId: Int!
  student: Student
  studentId: Int
  lectures: Lectures
  lecturesId: Int
  isCanceled: String
  attendanceDateTime: String
  lastModifiedTime: String
  Branch: Branch
  branchId: Int
}

type SeeAttendanceResult {
  ok: Boolean!
  message: String
  error: String
  enrollData: [Attendance]
  enrollCount: Int
  attendanceData: [Attendance]
  attendanceCount: Int
  absentData: [Attendance]
  absentCount: Int
  leaveEarlyData: [Attendance]
  leaveEarlyCount: Int
  outingData: [Attendance]
  outingCount: Int
  tardyData: [Attendance]
  tardyCount: Int
}

type SearchAttendanceResult {
  ok: Boolean!
  message: String
  error: String
  data: [Attendance]
  totalCount: Int
}

type EmploymentStatus {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  employmentType: String!
  dateOfEmployment: String!
  companyName: String!
  businessNum: String!
  responsibilities: String!
  location: String!
  phoneNum: String!
  businessSize: String!
  imploymentInsurance: String!
  proofOfImployment: String!
  relatedFields: String!
  completionType: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type EduInfomation {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  eduType: String!
  eduName: String!
  major: String
  graduationStatus: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type Certificate {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  CAdate: String!
  certificateName: String!
  certificateLevel: String
  CertificateIssuer: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type StudentConsultation {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  typeOfConsultation: String!
  dateOfConsultation: String!
  detailsOfConsultation: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type HopeForEmployment {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  workingArea: String!
  fieldOfHope: String!
  hopefulReward: Int!
  workType: String!
  workingHours: Int!
  opinion: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type EmploymentRecommendation {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  dateOfRecommendation: String!
  recruitmentField: String!
  companyName: String!
  location: String!
  phoneNum: String!
  dateOfInterview: String
  employmentStatus: String!
  reasonForNonEmployment: String!
  certificateOfEmploymentStatus: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type PreInspection {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  dateOfPreInspection: String
  preScreenerType: String
  preInspectionDetails: String
  actionTaken: String
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type StudentPortfolio {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  isBest: String!
  filePath: [String!]!
  details: String
  url: [String]
  createdAt: String!
  updatedAt: String!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  Subject: Subject
  subjectId: Int!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type PaymentDetail {
  id: Int!
  cashOrCard: String
  cardCompany: String
  cardNum: String
  installment: Int
  ApprovalNum: String
  amountPayment: Int
  paymentDate: String
  bankName: String
  depositorName: String
  depositAmount: Int
  depositDate: String
  studentPayment: StudentPayment
  studentPaymentId: Int
  receiver: ManageUser
  receiverId: Int
  accountingManager: String
  reqRefund: Boolean
  reqRefundManager: String
  reqRefundManagerId: Int
  reqRefundDate: String
  refundApproval: Boolean
  refundManager: String
  refundApprovalDate: String
  createdAt: String!
  updatedAt: String!
  studentId: Int
  stName: String
  cashReceipts: [String]
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
}

type PaymentDetailResult {
  ok: Boolean!
  message: String
  error: String
  PaymentDetail: [PaymentDetail]
  totalCount: Int
}

type Career {
  id: Int!
  lectureId: Int!
  studentId: Int!
  stName: String!
  careerDetails: String!
  Subject: Subject
  subjectId: Int!
  StudentPayment: StudentPayment
  studentPaymentId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type StudentPayment {
  id: Int!
  seScore: Int
  tuitionFee: Int
  discountAmount: String
  cashAmount: Int
  cardAmount: Int
  actualAmount: Int
  unCollectedAmount: Int
  receiptClassification: [String]
  paymentDate: String
  student: Student
  studentId: Int!
  paymentDetail: [PaymentDetail]
  processingManager: ManageUser
  processingManagerId: Int
  situationReport: Boolean
  amountReceived: Int
  subject: Subject
  subjectId: Int
  campus: String
  subDiv: String
  courseComplete: String
  employment: String
  dueDate: String
  classCode: String
  lectureAssignment: String
  createdAt: String
  updatedAt: String
  isWeekend: String
  attendance: [Attendance]
  Branch: Branch
  branchId: Int
  mZipCode: String
  mAddresses: String
  mAddressDetail: String
  dateOfDroppingOut: String
  reasonFordroppingOut: String
  EmploymentStatus: [EmploymentStatus]
  EduInfomation: [EduInfomation]
  Career: [Career]
  Certificate: [Certificate]
  StudentConsultation: [StudentConsultation]
  HopeForEmployment: [HopeForEmployment]
  EmploymentRecommendation: [EmploymentRecommendation]
  PreInspection: [PreInspection]
  StudentPortfolio: [StudentPortfolio]
  supportType: String
  lastModifiedTime: String
  lastModifiedByName: String
  lastModifiedByUserId: String
}

type StudentPaymentResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  StudentPayment: [StudentPayment]
}

type SearchStudentPaymentResult {
  ok: Boolean!
  message: String
  error: String
  data: [StudentPayment]
  totalCount: Int
}

type Student {
  id: Int!
  name: String!
  phoneNum1: String!
  phoneNum2: String
  smsAgreement: String!
  writer: String!
  createdAt: String!
  updatedAt: String!
  birthday: String
  manager: ManageUser
  managerUserId: Int
  studentMemo: [StudentMemo!]
  studentPayment: [StudentPayment!]
  lastModifiedTime: String
  Branch: Branch
  branchId: Int
}

type SeeStudentResult {
  ok: Boolean!
  message: String
  error: String
  totalCount: Int
  student: [Student]
}

type SearchStudentResult {
  ok: Boolean!
  message: String
  error: String
  student: [Student!]
  totalCount: Int
}

type Stamp {
  id: Int
  Manager: ManageUser
  manageUserId: Int
  createdAt: String
  updatedAt: String
  imageUrl: String
  lastModifiedTime: String
}

type Sms {
  id: Int!
  receiver: String!
  message: String!
  manageUser: ManageUser
  manageUserId: Int
  Branch: Branch
  createdAt: String!
  updatedAt: String!
  saveType: String
  branchId: Int
  rDate: String
  rTime: String
  successType: String
  sender: String
  failureReason: String
  lastModifiedTime: String
}

type ResultSearchSms {
  ok: Boolean!
  message: String
  error: String
  data: [Sms]
  totalCount: Int
}

type ManageUser {
  id: Int
  mUserId: String
  mUsername: String
  mPassword: String!
  mGrade: Int
  mRank: String
  mPhoneNum: String
  mPhoneNumCompany: String
  mPhoneNumInside: String
  mPhoneNumFriend: String
  mPart: [String!]
  mAvatar: String
  mJoiningDate: String
  mAddresses: String
  createdAt: String
  updatedAt: String
  resign: String
  email: String
  mZipCode: String
  mAddressDetail: String
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
  PermissionsGranted: [PermissionsGranted!]
  StudentState: [StudentState!]
  ConsultationMemo: [ConsultationMemo!]
  favoriteStudentState: [Int!]
  Student: [Student!]
  StudentMemo: [StudentMemo!]
  StudentPayment: [StudentPayment!]
  PaymentDetail: [PaymentDetail!]
  Lectures: [Lectures!]
  Stamp: [Stamp!]
  lastModifiedBy: String
  frequentlyUsed: [String]
  Sms: [Sms]
}

type SeeManageUserResult {
  ok: Boolean!
  message: String
  error: String
  data: [ManageUser]
  totalCount: Int
}

type SearchManageUserResult {
  ok: Boolean!
  error: String
  message: String
  data: [ManageUser]
  totalCount: Int
}

type ResultRefreshToken {
  ok: Boolean!
  error: String
  newAccessToken: String
}

type ResultIsMe {
  ok: Boolean!
  message: String
  error: String
}

type Alarm {
  id: Int!
  title: String!
  content: String!
  personalTarget: [Int!]
  createdAt: String
  updatedAt: String
  Branch: Branch
  branchId: Int
  lastModifiedTime: String
}

type ResultSeeAlarms {
  ok: Boolean!
  message: String
  error: String
  data: [Alarm]
  totalCount: Float
}

type AttendanceRecord {
  id: Int!
  clockIn: String!
  clockOut: String
  createdAt: String!
  updatedAt: String!
  ManageUser: ManageUser!
  manageUserId: Int!
  Branch: Branch
  branchId: Int
}

type ResultSearchAttendanceRecord {
  ok: Boolean!
  message: String
  error: String
  result: [AttendanceRecord]
  totalCount: Int
}

type UserActivityLogs {
  id: Int!
  userId: String!
  eventName: String!
  description: String
  createdAt: String
  updatedAt: String
  Branch: Branch
  branchId: Int
}

type UserActivityLogsResponse {
  ok: Boolean!
  error: String
  message: String
  data: [UserActivityLogs]
  totalCount: Int
}

type DashboardTodayResult {
  ok: Boolean
  today: Int
  compareToday: Int
  message: String
  error: String
}

type DashboardMonthResult {
  ok: Boolean
  month: Int
  compareMonth: Int
  message: String
  error: String
}

type DashboardUnpResult {
  ok: Boolean
  unpCount: Int
  message: String
  error: String
}

type DashboardATResult {
  topFiveName: [String]
  count: [Int!]
  totalStudentState: Int
  message: String
  error: String
}

type DashboardRDResult {
  receiptDiv: String
  count: Int
}

type HourlyData {
  nowDate: String
  cashOrCard: String
  currentState: String
  amount: Int
}

type HourlySalesData {
  ok: Boolean!
  message: String
  error: String
  hourlyDetails: [HourlyData]
  hourlyTotalCard: Int
  hourlyTotalCardRefund: Int
  hourlyTotalCash: Int
  hourlyTotalCashRefund: Int
  thisTimeRefundTotal: Int
  thisTimeAmountTotal: Int
  thisTimeRealTotal: Int
}

type ProcessingManagerGroupResult {
  receiverId: Int
  totalAmount: Int
  totalRefundAmount: Int
  totalActualAmount: Int
  totalPaymentCount: Int
  totalRefundCount: Int
}

type SalesStatisticsResult {
  ok: Boolean!
  message: String
  error: String
  data: [ProcessingManagerGroupResult]
}

type ResultAcademyRecord {
  ok: Boolean!
  message: String
  error: String
  result: [StudentPayment]
  totalCount: Int
}

type RegularEvaluationSet {
  id: Int!
  lectureId: Int!
  statusType: String!
  evaluationDetails: String!
  points: Int!
  Subject: Subject
  subjectId: Int!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
  lastModifiedByUserId: String!
  lastModifiedByName: String!
  lastModifiedTime: String
}

type ResultSeeRegularEvaluationSet {
  ok: Boolean!
  message: String
  error: String
  data: [RegularEvaluationSet]
  totalCount: Int
}

type ResultSearchSM {
  ok: Boolean!
  message: String
  error: String
  data: [SearchDataUnion]
  totalCount: Int
}

union SearchDataUnion = Career | EduInfomation | Certificate | StudentConsultation | HopeForEmployment | EmploymentRecommendation | EmploymentStatus | PreInspection | StudentPortfolio

type MessageStorage {
  id: Int!
  manageUser: ManageUser
  manageUserId: Int
  message: String!
  saveType: String!
  createdAt: String!
  updatedAt: String!
  Branch: Branch
  branchId: Int
}

type ResultMessageStorage {
  ok: Boolean!
  message: String
  error: String
  data: [MessageStorage]
  totalCount: Int
}

type ResultValidateNumber {
  ok: Boolean!
  message: String
  error: String
  validateNum: String
}

type Query {
  sayHello: String!
  searchManageUser(id: Int, mUserId: String, mUsername: String, mGrade: Int, mRank: String, mPhoneNum: String, mPart: String, resign: String, mJoiningDate: [String], limit: Int, page: Int): SearchManageUserResult!
  seeManageUser(limit: Int, page: Int, resign: String): SeeManageUserResult!
  mMe: ManageUser!
  isMme: ResultIsMe!
  searchPermissionsGranted(id: Int, permissionName: String, topic: String, manageUserId: Int): ResultSearchPermissionsGranted!
  seeAdviceType(limit: Int, page: Int, category: String): ResultAdviceType!
  seeAlarms(limit: Int, page: Int): ResultSeeAlarms!
  searchAttendanceRecord(id: Int, period: [String], mUserId: String, mUsername: String, page: Int, limit: Int): ResultSearchAttendanceRecord!
  seeStudentState(page: Int!, limit: Int): StudentStateResponse!
  seeFavorite: [StudentState!]!
  seeSubject(page: Int, limit: Int): SeeSubjectResult!
  seeUserActivityLogs: UserActivityLogsResponse!
  seeStudent(page: Int, limit: Int): SeeStudentResult!
  createStamp(manageUserId: Int!): CommonResponse!
  dashboardToday(today: [String], yesterday: [String]): DashboardTodayResult!
  dashboardMonth: DashboardMonthResult!
  dashboardUnp: DashboardUnpResult!
  dashboardAT(period: [String]): DashboardATResult!
  dashboardRD(period: [String]): [DashboardRDResult]
  seeStudentPayment(page: Int, limit: Int): StudentPaymentResult!
  seePaymentDetail(page: Int, limit: Int): PaymentDetailResult!
  seeLectures(page: Int, limit: Int): SeeLecturesResult!
  seeAttendance(attendanceDate: String!, lecturesId: Int!): SeeAttendanceResult!
  searchAttendance(lecturesId: Int!, id: Int, attendanceDate: [String], studentId: Int, studentPaymentId: Int): SearchAttendanceResult!
  searchWorkLogs(id: Int, workLogsDate: String, lecturesId: Int): SearchWorkLogsResult!
  signWorkLogs(id: Int!, lastModifiedTime: String): SignWorkLogsResult!
  searchAcademyRecord(id: Int, studentName: String, phoneNum: String, lectureName: String, subDiv: String, teacherName: String, limit: Int, page: Int): ResultAcademyRecord!
  seeRegularEvaluationSet(lectureId: Int, subjectId: Int, page: Int, limit: Int): ResultSeeRegularEvaluationSet!
  searchSM(modelType: String!, lectureId: Int, studentPaymentId: Int, subjectId: Int, limit: Int, page: Int): ResultSearchSM!
  searchSms(id: Int, branchId: Int, receiver: String, manageUserId: Int, period: [String], page: Int, limit: Int, saveType: String): ResultSearchSms!
  seeMessageStorage(saveType: String!, page: Int, limit: Int): ResultMessageStorage!
}

type Mutation {
  mLogin(mUserId: String!, mPassword: String!): ResultLogin!
  createBranch(branchName: String!): CommonResponse!
  editBranch(id: Int!, newBranchName: String!): CommonResponse!
  deleteBranch(id: Int!): CommonResponse!
  createManagerAccount(mUserId: String!, mUsername: String!, mPassword: String!, mGrade: Int, mRank: String, mPart: [String], mPhoneNum: String, mPhoneNumCompany: String, mPhoneNumFriend: String, mPhoneNumInside: String, mJoiningDate: String, mAddresses: String, email: String, mZipCode: String, mAddressDetail: String, branchId: Int): CommonResponse!
  createMasterUser(mUserId: String!, mUsername: String!, mPassword: String!, branchName: String!, mGrade: Int, mRank: String, mPart: [String!], mPhoneNum: String, mPhoneNumCompany: String, mPhoneNumFriend: String, mPhoneNumInside: String, mJoiningDate: String, mAddresses: String, email: String, mZipCode: String, mAddressDetail: String): CommonResponse!
  editManageUser(id: Int!, mUsername: String, mPassword: String, mGrade: Int, mRank: String, mPhoneNum: String, mPhoneNumCompany: String, mPhoneNumInside: String, mPhoneNumFriend: String, mPart: [String], mJoiningDate: String, mAddresses: String, email: String, resign: String, mZipCode: String, mAddressDetail: String, lastModifiedTime: String, branchId: Int, mAvatar: String): CommonResponse!
  deleteManageUser(id: Int!): CommonResponse!
  refreshToken(refreshToken: String!): ResultRefreshToken!
  createStudentState(input: CreateStudentStateDto!): CommonResponse!
  createPermissionGranted(permissionName: String!, topic: String!, manageUserIds: [Int], smsPermitted: String, readOnly: String, allPermitted: String): CommonResponse!
  editPermissionsGranted(lastModifiedTime: String!, id: Int!, manageUserIdsToConnect: [Int], manageUserIdsToDisconnect: [Int], smsPermitted: String, readOnly: String, allPermitted: String, permissionName: String, topic: String): CommonResponse!
  deletePermissionsGranted(id: Int!): CommonResponse!
  editAdviceType(id: Int!, onOff: String, category: String, defaultValue: String): CommonResponse!
  createAdviceType(type: String!, indexNum: Int!, category: String!, onOff: String, defaultValue: String): CommonResponse!
  staticPushAT(id: Int!, onOff: String): CommonResponse!
  changeOrderAT(indexNums: [Int!]!, ids: [Int!]): CommonResponse!
  readAlarms(id: Int, all: String): CommonResponse!
  createAttendanceRecord(clockIn: String!): CommonResponse!
  updateStudentState(input: EditStudentStateDto!): UpdateStudentStateResult!
  updateFavorite(id: Int!): UpdateFavoriteResult!
  createConsultationMemo(content: String!, studentStateId: Int!): CommonResponse!
  updateConsultationMemo(id: Int!, content: String!, lastModifiedTime: String): CommonResponse!
  deleteConsultationMemo(id: Int!): CommonResponse!
  deleteStudentState(id: [Int]!): CommonResponse!
  searchStudentState(id: Int, receiptDiv: String, phoneNum1: String, subDiv: String, pic: String, createdAt: [String], stVisit: [String], stName: String, adviceType: String, progress: [Int], page: Int, perPage: Int): SearchStudentStateResult!
  createSubject(subDiv: String!, subjectName: String!, fee: Int!, round: Int!, startDate: String, endDate: String, roomNum: String, exposure: Boolean, totalTime: Int, teacherName: String, subjectCode: String, expiresDateStart: String, expiresDateEnd: String): CommonResponse!
  updateSubject(id: Int!, subDiv: String!, subjectName: String!, fee: Int!, startDate: String, endDate: String, roomNum: String, exposure: Boolean, totalTime: Int, teacherName: String, subjectCode: String, expiresDateStart: String, expiresDateEnd: String, mGrade: Int, round: Int, lastModifiedTime: String): CommonResponse!
  deleteSubject(id: Int!): CommonResponse!
  searchSubject(id: Int, subDiv: String, subjectName: String, subjectCode: String, exposure: Boolean, page: Int, limit: Int): SearchSubjectResult!
  createUserActivityLogs(eventName: String!, description: String): CommonResponse!
  checkingIpRecord(ipRecord: String!, today: [String]!): CommonResponse!
  createStudent(name: String, phoneNum1: String, phoneNum2: String, smsAgreement: String, birthday: String, department: String): CommonResponse!
  editStudent(id: Int!, name: String, phoneNum1: String, phoneNum2: String, smsAgreement: String, birthday: String, lastModifiedTime: String): CommonResponse!
  deleteStudent(id: Int!): CommonResponse!
  doubleCheck(name: String!, phoneNum1: String!): CommonResponse!
  searchStudent(id: Int, studentName: String, createdAt: [String], birthday: [String], phoneNum: String, page: Int, limit: Int): SearchStudentResult!
  createStudentMemo(content: String!, studentId: Int!): CommonResponse!
  editStudentMemo(id: Int!, content: String!, lastModifiedTime: String!): CommonResponse!
  deleteStudentMemo(id: Int!): CommonResponse!
  createStudentPayment(campus: String!, tuitionFee: Int!, studentId: Int!, processingManagerId: Int!, subjectId: Int!, seScore: Int, discountAmount: String, cashAmount: Float, cardAmount: Int, actualAmount: Int, unCollectedAmount: Int, receiptClassification: [String], paymentDate: String, situationReport: Boolean, amountReceived: Int, subDiv: String, courseComplete: String, employment: String, dueDate: String, classCode: String, lectureAssignment: String, isWeekend: String, supportType: String): CommonResponse!
  editStudentPayment(id: Int!, subjectId: Int!, campus: String, seScore: Int, subject: String, tuitionFee: Int, discountAmount: String, cashAmount: Int, cardAmount: Int, actualAmount: Int, unCollectedAmount: Int, receiptClassification: [String], paymentDate: String, processingManagerId: Int, situationReport: Boolean, amountReceived: Int, subDiv: String, courseComplete: String, employment: String, dueDate: String, classCode: String, lectureAssignment: String, isWeekend: String, mZipCode: String, mAddresses: String, mAddressDetail: String, supportType: String, lastModifiedTime: String): CommonResponse!
  deleteStudentPayment(id: Int!): CommonResponse!
  searchStudentPayment(id: Int, page: Int, limit: Int, studentName: String, period: [String], createdPeriod: [String], subDiv: String, employment: String, lectureAssignment: String): SearchStudentPaymentResult!
  createPaymentDetail(cashOrCard: String!, studentPaymentId: Int!, receiverId: Int!, cardCompany: String, cardNum: String, installment: Int, ApprovalNum: String, amountPayment: Int, paymentDate: String, bankName: String, depositorName: String, depositAmount: Int, depositDate: String, cashReceipts: [String]): CommonResponse!
  editPaymentDetail(id: Int!, cashOrCard: String!, studentPaymentId: Int!, receiverId: Int!, lastModifiedTime: String!, cardCompany: String, cardNum: String, installment: Int, ApprovalNum: String, amountPayment: Int, paymentDate: String, bankName: String, depositorName: String, depositAmount: Int, depositDate: String, cashReceipts: [String]): CommonResponse!
  deletePaymentDetail(id: Int!): CommonResponse!
  searchPaymentDetail(id: Int, period: [String], stName: String, page: Int, limit: Int, reqRefund: Boolean, refundApproval: Boolean, reqRefundDate: [String], receiverId: Int, refundApprovalDate: [String], ApprovalNum: String, sortOf: String, paymentDate: [String]): PaymentDetailResult!
  getHourlySalesData(date: [String]!): HourlySalesData!
  salesStatistics(period: [String]!, receiverId: [Int]!): SalesStatisticsResult!
  reqRefund(id: Int!, reqRefund: Boolean!, reqRefundDate: String!): CommonResponse!
  refundApproval(id: Int!, refundApproval: Boolean!, refundApprovalDate: String!, studentPaymentId: Int!): CommonResponse!
  createLectures(campus: String!, temporaryName: String!, subDiv: String!, teachersId: [Int]!, roomNum: String!, subjectId: Int!, lecturePeriodStart: String!, lecturePeriodEnd: String!, lectureDetails: [String]!, lectureTime: [String]!, eduStatusReport: String!, ApprovedNum: Int!, confirmedNum: Int!, sessionNum: Int!, timetableAttached: String): CommonResponse!
  editLectures(id: Int!, lastModifiedTime: String!, campus: String, temporaryName: String, subDiv: String, teachersId: [Int], roomNum: String, subjectId: Int, lecturePeriodStart: String, lecturePeriodEnd: String, lectureDetails: [String], lectureTime: [String], eduStatusReport: String, ApprovedNum: Int, confirmedNum: Int, sessionNum: Int, timetableAttached: String): CommonResponse!
  deleteLectures(id: Int!): CommonResponse!
  searchLectures(id: Int, periodStart: String, periodEnd: String, temporaryName: String, subjectId: Int, teacherId: Int, limit: Int, page: Int): SearchLecturesResult!
  duplicateCheck(studentId: Int!, subjectId: Int!): CommonResponse!
  classCancellation(id: Int!, courseComplete: String!, dateOfDroppingOut: String, reasonFordroppingOut: String, lastModifiedTime: String): CommonResponse!
  createAttendance(attendanceDate: String!, lecturesId: Int!, studentPaymentId: [Int]!, studentId: [Int]!, attendanceState: [String]!): CommonResponse!
  editAttendance(lastModifiedTime: String!, id: [Int]!, attendanceState: [String]!): CommonResponse!
  deleteAttendance(id: Int!): CommonResponse!
  createWorkLogs(lecturesId: Int!, workLogsDate: String!): CommonResponse!
  editWorkLogs(id: Int!, attendanceCount: [Int], lastModifiedTime: String!, trainingInfoOne: [String], trainingInfoTwo: [String], trainingInfoThree: [String], trainingInfoFour: [String], trainingInfoFive: [String], trainingInfoSix: [String], trainingInfoSeven: [String], trainingInfoEight: [String], trainingTimeOneday: [Int], trainingTimeTotal: [Int], instruction: String, absentSt: String, tardySt: String, leaveEarlySt: String, outingSt: String, etc: String, lecturesId: Int, workLogsDate: String, checkList: [String], checkContext: [String]): CommonResponse!
  deleteWorkLogs(id: Int!): CommonResponse!
  createCareer(careerDetails: String!, subjectId: Int!, studentPaymentId: Int!): CommonResponse!
  editCareer(id: Int!, careerDetails: String!, lastModifiedTime: String): CommonResponse!
  deleteCareer(id: Int!): CommonResponse!
  createCertificate(CAdate: String!, certificateName: String!, CertificateIssuer: String!, subjectId: Int!, studentPaymentId: Int!, certificateLevel: String): CommonResponse!
  editCertificate(id: Int!, lastModifiedTime: String!, CAdate: String, certificateName: String, certificateLevel: String, CertificateIssuer: String): CommonResponse!
  deleteCertificate(id: Int!): CommonResponse!
  createEduInfomation(subjectId: Int!, studentPaymentId: Int!, eduType: String!, eduName: String!, graduationStatus: String!, major: String): CommonResponse!
  editEduInfomation(id: Int!, lastModifiedTime: String!, eduType: String, eduName: String, major: String, graduationStatus: String): CommonResponse!
  deleteEduInfomation(id: Int!): CommonResponse!
  createEmploymentRecommendation(dateOfRecommendation: String!, recruitmentField: String!, companyName: String!, location: String!, phoneNum: String!, employmentStatus: String!, reasonForNonEmployment: String!, certificateOfEmploymentStatus: String!, subjectId: Int!, studentPaymentId: Int!, dateOfInterview: String): CommonResponse!
  editEmploymentRecommendation(id: Int!, lastModifiedTime: String!, dateOfRecommendation: String, recruitmentField: String, companyName: String, location: String, phoneNum: String, dateOfInterview: String, employmentStatus: String, reasonForNonEmployment: String, certificateOfEmploymentStatus: String): CommonResponse!
  deleteRecommendation(id: Int!): CommonResponse!
  createEmploymentStatus(employmentType: String!, dateOfEmployment: String!, companyName: String!, businessNum: String!, responsibilities: String!, location: String!, phoneNum: String!, businessSize: String!, imploymentInsurance: String!, proofOfImployment: String!, relatedFields: String!, completionType: String!, subjectId: Int!, studentPaymentId: Int!): CommonResponse!
  editEmploymentStatus(id: Int!, employmentType: String!, dateOfEmployment: String!, companyName: String!, businessNum: String!, responsibilities: String!, location: String!, phoneNum: String!, businessSize: String!, imploymentInsurance: String!, proofOfImployment: String!, relatedFields: String!, completionType: String!, lastModifiedTime: String!): CommonResponse!
  deleteEmploymentStatus(id: Int!): CommonResponse!
  createHopeForEmployment(workingArea: String!, fieldOfHope: String!, hopefulReward: Int!, workType: String!, workingHours: Int!, opinion: String!, studentPaymentId: Int!, subjectId: Int!): CommonResponse!
  editHopeEmployment(id: Float!, fieldOfHope: String!, hopefulReward: Int!, workType: String!, workingHours: Int!, opinion: String!, lastModifiedTime: String!, workingArea: String): CommonResponse!
  deleteHopeForEmployment(id: Int!): CommonResponse!
  createPreInspection(subjectId: Int!, studentPaymentId: Int!, dateOfPreInspection: String, preScreenerType: String, preInspectionDetails: String, actionTaken: String): CommonResponse!
  editPreInspection(id: Int!, lastModifiedTime: String!, dateOfPreInspection: String, preScreenerType: String, preInspectionDetails: String, actionTaken: String): CommonResponse!
  deletePreInspection(id: Int!): CommonResponse!
  createRegularEvaluationSet(statusType: String!, evaluationDetails: String!, points: Int!, subjectId: Int!): CommonResponse!
  editRegularEvaluationSet(id: Int!, statusType: String!, evaluationDetails: String!, points: Int!, lastModifiedTime: String!): CommonResponse!
  deleteRegularEvaluationSet(id: Int!): CommonResponse!
  createStudentConsultation(typeOfConsultation: String!, dateOfConsultation: String!, detailsOfConsultation: String!, subjectId: Int!, studentPaymentId: Int!): CommonResponse!
  editStudentConsultation(id: Int!, lastModifiedTime: String!, typeOfConsultation: String, dateOfConsultation: String, detailsOfConsultation: String): CommonResponse!
  deleteStudentConsultation(id: Int!): CommonResponse!
  createStudentPortfolio(studentPaymentId: Int!, subjectId: Int!, filePath: [String]!, isBest: String, details: String, url: [String]): CommonResponse!
  editStudentPortfolio(id: Int!, lastModifiedTime: String!, isBest: String, filePath: [String], details: String, url: [String]): CommonResponse!
  deleteFileNameSp(id: Int!, fileUrl: String!, folderName: String!): CommonResponse!
  sendSms(receiver: String!, message: String!, rDate: String, rTime: String, senderNum: String): CommonResponse!
  deleteSms(id: Int!): CommonResponse!
  createMessageStorage(message: String!, saveType: String!): CommonResponse!
  deleteMessageStorage(id: Int!): CommonResponse!
  createBusinessAccountReq(companyName: String!, phoneNum: String!, validate: String!, email: String!, agree: String!, filePath: [String]!): CommonResponse!
  editBusinessAccountReq(id: Int!, creationComplete: String!, rejection: String): CommonResponse!
  deleteBusinessAccountReq(id: Int!): CommonResponse!
  validateNumber(input: ValidateNumberDto!): ResultValidateNumber!
  createWorkBoard(createWorkBoardDto: CreateWorkBoardDto!): CommonResponse!
}

input CreateStudentStateDto {
  agreement: String!
  progress: Int!
  adviceTypes: [Int]!
  subject: [String]!
  stName: String
  phoneNum1: String
  campus: String
  detail: String
  category: String
  phoneNum2: String
  phoneNum3: String
  stEmail: String
  stAddr: String
  stVisit: String
  subDiv: String
  expEnrollDate: String
  perchase: Boolean
  birthday: String
  receiptDiv: String
  pic: String
  classMethod: [String]
  branchId: Int
  today: [String]
}

input EditStudentStateDto {
  id: Int!
  campus: String
  category: String
  stName: String
  phoneNum1: String
  phoneNum2: String
  phoneNum3: String
  subject: [String]
  detail: String
  progress: Int
  stEmail: String
  stAddr: String
  subDiv: String
  stVisit: String
  expEnrollDate: String
  perchase: Boolean
  birthday: String
  pic: String
  receiptDiv: String
  adviceTypes: [Int]
  lastModifiedTime: String
}

input ValidateNumberDto {
  phoneNum: String!
}

input CreateWorkBoardDto {
  title: String!
  writer: String!
  toTeam: String
  toPerson: String
  level: String
  startDate: String
  endDate: String
  workStatus: String
  detail: String!
  filePath: String
  lastModifiedTime: String
}